<project xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:antcontrib="antlib:net.sf.antcontrib" name="zm-store" default="jar">
  <import file="../build-common.xml" />
  <property name="service.webapp.dir" location="${jetty.webapps.dir}/service" />
  <property name="zimbra.webapp.dir" location="${jetty.webapps.dir}/zimbra" />
  <property name="admin.webapp.dir" location="${jetty.webapps.dir}/zimbraAdmin" />
  <property name="config.dir" location="conf" />
  <property name="warfilename" value="service.war" />
  <property name="warfile" location="${build.dir}/${warfilename}" />
  <condition property="production.suffix" value=".production" else="">
    <isset property="is-production" />
  </condition>
  <condition property="war.web.xml" value="${config.dir}/web.xml${production.suffix}">
    <not>
      <isset property="war.web.xml" />
    </not>
  </condition>
  <!-- properties used for generating and testing LDAP changes -->
  <property name="ldap.config.dir" location="${zimbra.root.dir}/zm-ldap-utilities/conf/ldap" />
  <property name="slapd.config.dir" value="${ldap.config.dir}/config" />
  <condition property="slapd.config.src" value="${slapd.config.dir}/cn=config.ldif">
    <isset property="is-production" />
  </condition>
  <condition property="slapd.config.src" value="${slapd.config.dir}/cn=config.ldif.dev">
    <not>
      <isset property="is-production" />
    </not>
  </condition>
  <property name="slapd.conf.src" value="${ldap.config.dir}/slapd.conf${production.suffix}" />
  <property name="slapd.conf.dir" value="conf" />
  <property name="slapd.etc.dir" value="common/etc/openldap" />
  <property name="ldapmodify" value="${zimbra.home.dir}/common/bin/ldapmodify" />
  <property name="ldapdelete" value="${zimbra.home.dir}/common/bin/ldapdelete" />
  <!-- classpath for running utilities -->
  <path id="run.class.path">
    <path refid="class.path" />
    <pathelement location="${build.classes.dir}" />
  </path>

  <target name="test.if.imapd.available">
    <condition property="imapd.available">
      <available file="${zimbra.home.dir}/bin/zmimapdctl" type="file" />
    </condition>
  </target>
  <target name="imapd-control" if="imapd.available" depends="test.if.imapd.available">
    <exec executable="zmimapdctl">
      <arg value="${action}" />
    </exec>
  </target>
  <target name="stop-webserver">
    <exec executable="zmmailboxdctl">
      <arg value="stop" />
    </exec>
    <antcall target="imapd-control">
      <param name="action" value="stop" />
    </antcall>
  </target>
  <target name="start-webserver">
    <exec executable="zmmailboxdctl">
      <arg value="start" />
    </exec>
    <antcall target="imapd-control">
      <param name="action" value="start" />
    </antcall>
  </target>
  <target name="restart-webserver">
    <exec executable="zmmailboxdctl">
      <arg value="restart" />
    </exec>
    <antcall target="imapd-control">
      <param name="action" value="restart" />
    </antcall>
  </target>
  <target name="stop-zimbra">
    <exec executable="zmcontrol">
      <arg value="stop" />
    </exec>
  </target>
  <target name="start-zimbra">
    <exec executable="zmcontrol">
      <arg value="start" />
    </exec>
  </target>
  <target name="make-dirs">
    <!-- take advantage of the fact that mkdir uses File.mkdirs() and creates inbetween dirs -->
    <echo>Creating dirs under ${base.dir}</echo>
    <mkdir dir="${base.dir}/${slapd.conf.dir}" />
    <mkdir dir="${base.dir}/${slapd.etc.dir}/schema" />
    <mkdir dir="${base.dir}/bin" />
    <mkdir dir="${base.dir}/conf/attrs" />
    <mkdir dir="${base.dir}/conf/msgs" />
    <mkdir dir="${base.dir}/db" />
    <mkdir dir="${base.dir}/lib/ext" />
    <mkdir dir="${base.dir}/lib/jars" />
    <mkdir dir="${base.dir}/lib/jars-ant" />
    <mkdir dir="${base.dir}/libexec" />
  </target>
  <target name="build-init" description="Creates directories required for compiling">
    <mkdir dir="${build.classes.dir}" />
    <mkdir dir="${build.dir}/data" />
    <mkdir dir="${build.dir}/zimbra" />
    <mkdir dir="${build.dir}/zimbra/conf" />
    <antcall target="make-dirs">
      <param name="base.dir" value="${dist.dir}" />
    </antcall>
  </target>
  <target name="generate-buildinfo" depends="build-init,set-dev-version">
    <mkdir dir="${build.dir}/buildinfo/com/zimbra/cs/util" />
    <echo file="${build.dir}/buildinfo/com/zimbra/cs/util/BuildInfoGenerated.java">
      package com.zimbra.cs.util;

      class BuildInfoGenerated {
      public static final String MAJORVERSION = "${zimbra.buildinfo.majorversion}";
      public static final String MINORVERSION = "${zimbra.buildinfo.minorversion}";
      public static final String MICROVERSION = "${zimbra.buildinfo.microversion}";
      public static final String RELCLASS = "${zimbra.buildinfo.relclass}";
      public static final String RELNUM = "${zimbra.buildinfo.relnum}";
      public static final String BUILDNUM = "${zimbra.buildinfo.buildnum}";
      public static final String VERSION = "${zimbra.buildinfo.version}";
      public static final String RELEASE = "${zimbra.buildinfo.release}";
      public static final String DATE = "${DSTAMP}-${TSTAMP}";
      public static final String HOST = "${zimbra.buildinfo.host}";
      }
    </echo>
    <javac includeantruntime="false" destdir="${build.classes.dir}" debug="true" target="${javac.target}" srcdir="${build.dir}/buildinfo">
      <compilerarg value="-Xlint:deprecation" />
      <compilerarg value="-Xlint:unchecked" />
    </javac>
  </target>
  <target name="generate-getters" depends="compile,resolve" description="generate methods for attributes in attrs.xml">
    <antcall target="generate-getter">
      <param name="getter.class" value="account" />
      <param name="getter.output" value="ZAttrAccount.java" />
    </antcall>
    <antcall target="generate-getter">
      <param name="getter.class" value="calendarResource" />
      <param name="getter.output" value="ZAttrCalendarResource.java" />
    </antcall>
    <antcall target="generate-getter">
      <param name="getter.class" value="cos" />
      <param name="getter.output" value="ZAttrCos.java" />
    </antcall>
    <antcall target="generate-getter">
      <param name="getter.class" value="domain" />
      <param name="getter.output" value="ZAttrDomain.java" />
    </antcall>
    <antcall target="generate-getter">
      <param name="getter.class" value="server" />
      <param name="getter.output" value="ZAttrServer.java" />
    </antcall>
    <antcall target="generate-getter">
      <param name="getter.class" value="ucService" />
      <param name="getter.output" value="ZAttrUCService.java" />
    </antcall>
    <antcall target="generate-getter">
      <param name="getter.class" value="globalConfig" />
      <param name="getter.output" value="ZAttrConfig.java" />
    </antcall>
    <antcall target="generate-getter">
      <param name="getter.class" value="distributionList" />
      <param name="getter.output" value="ZAttrDistributionList.java" />
    </antcall>
    <antcall target="generate-getter">
      <param name="getter.class" value="group" />
      <param name="getter.output" value="ZAttrDynamicGroup.java" />
    </antcall>
    <antcall target="generate-getter">
      <param name="getter.class" value="shareLocator" />
      <param name="getter.output" value="ZAttrShareLocator.java" />
    </antcall>
    <antcall target="generate-getter">
      <param name="getter.class" value="alwaysOnCluster" />
      <param name="getter.output" value="ZAttrAlwaysOnCluster.java" />
    </antcall>
    <antcall target="generate-provisioning" />
  </target>
  <target name="generate-getter">
    <ivy:cachepath pathid="class.path" />
    <java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true" classpathref="run.class.path" failonerror="true">
      <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}" />
      <arg line="-a generateGetters -c ${getter.class} -i ${config.dir}/attrs -r ${src.java.dir}/com/zimbra/cs/account/${getter.output}" />
    </java>
  </target>
  <target name="generate-provisioning">
    <ivy:cachepath pathid="class.path" />
    <java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true" classpathref="run.class.path" failonerror="true">
      <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}" />
      <arg line="-a generateProvisioning -i ${config.dir}/attrs -r ${common.src.java.dir}/com/zimbra/common/account/ZAttrProvisioning.java" />
    </java>
  </target>
  <target name="jar" depends="generate-buildinfo,compile" description="Creates the jar file">
    <antcall target="zextras-jar">
      <param name="implementation.title" value="Zimbra Server" />
    </antcall>
  </target>
  <target name="clean" description="Deletes classes from build directories">
    <delete dir="${build.dir}" />
  </target>
  <target name="undeploy-no-stop">
    <delete>
      <fileset dir="${common.jars.dir}" includes="zm-store*.jar,zimbrastore*.jar" />
    </delete>
    <antcontrib:if>
      <available file="${zimbra.webapp.dir}" type="dir" property="zimbra.webapp.installed" />
      <then>
        <delete verbose="true">
          <fileset dir="${zimbra.webapp.dir}/WEB-INF/lib/" includes="zm-store*.jar,zimbrastore*.jar" />
        </delete>
      </then>
    </antcontrib:if>
    <antcontrib:if>
      <available file="${jetty.webapps.dir}/zimbraAdmin/" type="dir" property="zimbraadmin.webapp.installed" />
      <then>
        <delete verbose="true">
          <fileset dir="${admin.webapp.dir}/WEB-INF/lib/" includes="zm-store*.jar,zimbrastore*.jar" />
        </delete>
      </then>
    </antcontrib:if>
    <antcontrib:if>
      <available file="${service.webapp.dir}" type="dir" property="service.webapp.installed" />
      <then>
        <delete verbose="true">
          <fileset dir="${service.webapp.dir}/WEB-INF/lib/" includes="zm-store*.jar,zimbrastore*.jar" />
        </delete>
      </then>
    </antcontrib:if>
  </target>
  <target name="undeploy" depends="stop-webserver">
    <antcall target="undeploy-no-stop" />
  </target>
  <target name="deploy" depends="jar,set-dev-version,undeploy">
    <copy file="${build.dir}/${jar.file}" tofile="${common.jars.dir}/zimbrastore.jar" />
    <!-- have to use zimbrastore.jar until https://bugzilla.zimbra.com/show_bug.cgi?id=106076 is fixed -->
    <antcontrib:if>
      <available file="${jetty.webapps.dir}/zimbra/" type="dir" property="zimbra.webapp.installed" />
      <then>
        <copy file="${build.dir}/${jar.file}" todir="${zimbra.webapp.dir}/WEB-INF/lib/" />
      </then>
    </antcontrib:if>
    <antcontrib:if>
      <available file="${jetty.webapps.dir}/zimbraAdmin/" type="dir" property="zimbraadmin.webapp.installed" />
      <then>
        <copy file="${build.dir}/${jar.file}" todir="${admin.webapp.dir}/WEB-INF/lib/" />
      </then>
    </antcontrib:if>
    <antcontrib:if>
      <available file="${jetty.webapps.dir}/service/" type="dir" property="service.webapp.installed" />
      <then>
        <copy file="${build.dir}/${jar.file}" todir="${service.webapp.dir}/WEB-INF/lib/" />
      </then>
    </antcontrib:if>
    <antcall target="start-webserver" />
  </target>
  <target name="deploy-war" depends="war">
    <antcall target="stop-webserver" />
    <antcall target="copy-war" />
    <antcall target="start-webserver" />
  </target>
  <target name="copy-war">
    <delete dir="${jetty.home.dir}/webapps/service" />
    <delete file="${jetty.home.dir}/webapps/${warfilename}" />
    <copy file="${warfile}" todir="${jetty.home.dir}/webapps" />
    <mkdir dir="${jetty.home.dir}/webapps/service" />
    <chmod file="${jetty.home.dir}/webapps/service" perm="o+rwx" />
    <chmod file="${jetty.home.dir}/webapps/service" perm="g+rx" />
    <chmod file="${jetty.home.dir}/webapps/service" perm="o-rwx" />
    <unzip dest="${jetty.home.dir}/webapps/service" src="${jetty.home.dir}/webapps/${warfilename}" />
    <delete file="${jetty.home.dir}/webapps/${warfilename}" />
  </target>

  <target name="war" depends="jar,set-dev-version">
    <delete dir="${build.tmp.dir}" />
    <!-- Resolve store dependencies -->
    <ivy:resolve file="war-ivy.xml" settingsRef="dev.settings" transitive="true" />
    <!-- Copy last resolved dependencies under tmp -->
    <ivy:retrieve pattern="${build.tmp.dir}/[module]-[revision].[ext]"/>
    <war warfile="${warfile}" webxml="${war.web.xml}">
      <fileset dir="WebRoot" />
      <lib dir="${build.tmp.dir}" excludes="httpclient-*.jar" includes="*.jar" />
      <!-- /lib -->
      <classes dir="${config.dir}" includes="sieveConfig.xml" />
      <classes dir="${config.dir}" includes="cxf.xml" />
    </war>
  </target>
  <target name="test-jar" depends="test-compile" description="creates the jar file needed for testing">
    <antcall target="zextras-jar">
      <param name="jar.file" value="zimbrastore-test.jar" />
      <param name="implementation.title" value="zm-store test" />
      <param name="jar.build.dir" value="${server.dir}/build/test-classes/" />
    </antcall>
  </target>
  <target name="publish-store-test" depends="test-jar">
    <copy file="${build.dir}/zimbrastore-test.jar" tofile="${dev.home}/.zcs-deps/zimbrastore-test-1.0.jar" />
  </target>
  <target name="generate-ldap-config" depends="set-dev-version">
    <dependset>
      <srcfileset dir="${config.dir}/attrs" includes="*.xml" />
      <targetfileset dir="${build.dir}/ldap-config" includes="*" />
    </dependset>
    <delete dir="${build.dir}/attrs" />
    <delete dir="${build.dir}/ldap-config" />
    <mkdir dir="${build.dir}/attrs" />
    <copy todir="${build.dir}/attrs" overwrite="true" preservelastmodified="true">
      <fileset dir="${config.dir}/attrs" includes="*.xml" />
    </copy>
    <mkdir dir="${build.dir}/ldap-config" />
    <mkdir dir="${build.dir}/ldap-config/config" />
    <!-- Schema for pre OpenLDAP 2.4 - uses carbonio.schema-template, should eventually retire carbonio.schema-template and only use ocs.xml -->
    <java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true" classpathref="run.class.path" failonerror="true">
      <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}" />
      <arg line="-a generateLdapSchema -i ${build.dir}/attrs -t ${ldap.config.dir}/carbonio.schema-template -o ${build.dir}/ldap-config/carbonio.schema" />
    </java>
    <!-- Schema for OpenLDAP 2.4 - use ocs.xml -->
    <java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true" classpathref="run.class.path" failonerror="true">
      <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}" />
      <arg line="-a generateSchemaLdif -i ${build.dir}/attrs -o ${build.dir}/ldap-config/config/zextras.ldif" />
    </java>
    <java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true" classpathref="run.class.path" failonerror="true">
      <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}" />
      <arg line="-a generateGlobalConfigLdif -i ${build.dir}/attrs -o ${build.dir}/ldap-config/zimbra_globalconfig.ldif" />
    </java>
    <java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true" classpathref="run.class.path" failonerror="true">
      <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}" />
      <arg line="-a generateDefaultCOSLdif -i ${build.dir}/attrs -o ${build.dir}/ldap-config/zimbra_defaultcos.ldif" />
    </java>
    <java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true" classpathref="run.class.path" failonerror="true">
      <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}" />
      <arg line="-a generateDefaultExternalCOSLdif -i ${build.dir}/attrs -o ${build.dir}/ldap-config/zimbra_defaultexternalcos.ldif" />
    </java>
  </target>
  <target name="update-ldap-schema" depends="generate-ldap-config,set-dev-version">
    <antcall target="stop-zimbra" />
    <copy todir="${zimbra.home.dir}/conf/attrs" overwrite="true">
      <fileset dir="${build.dir}/attrs" />
    </copy>
    <!-- copy generated ldif files -->
    <copy todir="${zimbra.home.dir}/${slapd.etc.dir}/zimbra/" file="${build.dir}/ldap-config/zimbra_globalconfig.ldif" overwrite="true" />
    <copy todir="${zimbra.home.dir}/${slapd.etc.dir}/zimbra/" file="${build.dir}/ldap-config/zimbra_defaultcos.ldif" overwrite="true" />
    <copy todir="${zimbra.home.dir}/${slapd.etc.dir}/zimbra/" file="${build.dir}/ldap-config/zimbra_defaultexternalcos.ldif" overwrite="true" />
    <copy todir="${zimbra.home.dir}/${slapd.etc.dir}/zimbra/schema/" file="${build.dir}/ldap-config/carbonio.schema" overwrite="true" />
    <copy todir="${zimbra.home.dir}/${slapd.etc.dir}/zimbra/schema/" file="${build.dir}/ldap-config/config/carbonio.ldif" overwrite="true" />
    <!-- apply ldap schema changes -->
    <exec executable="/opt/zextras/libexec/zmldapschema" />
    <antcall target="start-zimbra" />
  </target>
  <target name="create-version-sql" depends="build-init, compile, set-dev-version" description="Creates version-init.sql">
    <java classname="com.zimbra.cs.db.MySQL" fork="true" classpathref="class.path" failonerror="true">
      <classpath>
        <pathelement location="${build.dir}/classes" />
      </classpath>
      <arg line="-o ${dist.dir}" />
    </java>
  </target>
  <target name="create-version-ldap" depends="build-init" description="Creates ldap schema version: attrs-schema">
    <exec executable="git" failonerror="false" output="${dist.dir}/conf/attrs/attrs-schema">
      <arg value="log" />
      <arg value="-1" />
      <arg value="--pretty=format:%at" />
      <arg value="conf/attrs/attrs.xml" />
    </exec>
  </target>
  <target name="setup-for-soap-tests" description="Does necessary setup for RunUnitTestsRequests">
    <exec executable="sudo" failonerror="false">
      <arg value="mkdir" />
      <arg value="/opt/zextras/unittest" />
    </exec>
    <exec executable="sudo" failonerror="false">
      <arg value="chown" />
      <arg value="zimbra" />
      <arg value="/opt/zextras/unittest" />
    </exec>
    <copy todir="/opt/zextras/unittest">
      <fileset dir="data/unittest" includes="**" />
    </copy>
  </target>

  <target name="dist" depends="jar" description="Copies jar to dist dir">
    <copy todir="${dist.dir}">
      <fileset dir="${build.dir}" />
      <globmapper from="zm-store-*.jar" to="zm-store.jar" />
    </copy>
  </target>
</project>
